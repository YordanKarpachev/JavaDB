<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="e14d442f-5d9b-4e90-864e-631831a1d112" name="Changes" comment="Your task is to create a database for a University System, using the Code First approach. In the database, we should keep information about students, teachers and courses. The database should have the following tables:&#10;    • Student (id, first name, last name, phone number, average grade, attendance)&#10;    • Teacher (id, first name, last name, phone number, email, salary per hour)&#10;    • Course (id, name, description, start date, end date, credits)&#10;The relationships between the tables are as follows:&#10;    • Each student can be enrolled in many courses and in each course many students can be enrolled &#10;    • A teacher can teach in many courses but one course can be taught only by one teacher&#10;Use class hierarchy to reduce code duplication">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/A03/Course.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/A03/Course.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/A03/Student.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/A03/Student.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/A03/Teacher.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/A03/Teacher.java" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Class" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$/.." />
    <option name="UPDATE_TYPE" value="REBASE" />
  </component>
  <component name="MarkdownSettingsMigration">
    <option name="stateVersion" value="1" />
  </component>
  <component name="MavenImportPreferences">
    <option name="importingSettings">
      <MavenImportingSettings>
        <option name="workspaceImportEnabled" value="true" />
      </MavenImportingSettings>
    </option>
  </component>
  <component name="ProjectId" id="2McfmUQZJ4Z2oyTpyRuJ6eWJ2PD" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent"><![CDATA[{
  "keyToString": {
    "ASKED_SHARE_PROJECT_CONFIGURATION_FILES": "true",
    "RunOnceActivity.OpenProjectViewOnStart": "true",
    "RunOnceActivity.ShowReadmeOnStart": "true",
    "SHARE_PROJECT_CONFIGURATION_FILES": "true",
    "WebServerToolWindowFactoryState": "false",
    "last_opened_file_path": "C:/Users/yorda/Desktop/Softuni/PROJEKT Spring data/JavaDB/ExerciseHibernateCodeFirst",
    "node.js.detected.package.eslint": "true",
    "node.js.detected.package.tslint": "true",
    "node.js.selected.package.eslint": "(autodetect)",
    "node.js.selected.package.tslint": "(autodetect)",
    "project.structure.last.edited": "Modules",
    "project.structure.proportion": "0.15",
    "project.structure.side.proportion": "0.2",
    "settings.editor.selected.configurable": "preferences.lookFeel",
    "vue.rearranger.settings.migration": "true"
  },
  "keyToStringList": {
    "DatabaseDriversLRU": [
      "mysql"
    ]
  }
}]]></component>
  <component name="RecentsManager">
    <key name="CopyFile.RECENT_KEYS">
      <recent name="C:\Users\yorda\Desktop\Softuni\PROJEKT Spring data\JavaDB\ExerciseHibernateCodeFirst\src\main\resources" />
    </key>
    <key name="CopyClassDialog.RECENTS_KEY">
      <recent name="A03" />
      <recent name="A02" />
      <recent name="A01" />
    </key>
  </component>
  <component name="RunManager" selected="Application.Main">
    <configuration name="A01.Main" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="A01.Main" />
      <module name="ExerciseHibernateCodeFirst" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="A01.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="Main" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="Main" />
      <module name="ExerciseHibernateCodeFirst" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="Application.Main" />
        <item itemvalue="Application.A01.Main" />
      </list>
    </recent_temporary>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="e14d442f-5d9b-4e90-864e-631831a1d112" name="Changes" comment="" />
      <created>1678071951588</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1678071951588</updated>
      <workItem from="1678071952713" duration="719000" />
      <workItem from="1678072685742" duration="421000" />
      <workItem from="1678073477552" duration="13868000" />
    </task>
    <task id="LOCAL-00001" summary="Exercise: Hibernate Code First">
      <created>1678072524343</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1678072524343</updated>
    </task>
    <task id="LOCAL-00002" summary="Exercise: Hibernate Code First">
      <created>1678072589670</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1678072589670</updated>
    </task>
    <task id="LOCAL-00003" summary="Exercise: Hibernate Code First">
      <created>1678072614679</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1678072614679</updated>
    </task>
    <task id="LOCAL-00004" summary="Exercise: Hibernate Code First&#10;;)">
      <created>1678072799619</created>
      <option name="number" value="00004" />
      <option name="presentableId" value="LOCAL-00004" />
      <option name="project" value="LOCAL" />
      <updated>1678072799619</updated>
    </task>
    <task id="LOCAL-00005" summary="    1. Gringotts Database&#10;Your task is to create table wizard_deposits using the Code First approach. The table should contain the following fields:&#10;    • id – Primary Key (number in range [1, 231-1].&#10;    • first_name – Text field with max length of 50 symbols.&#10;    • last_name - Text field with max length of 60 symbols. Required&#10;    • notes – Text field with max length of 1000 symbols&#10;    • age – Required&#10;    • magic_wand_creator – Text field with max length of 100 symbols&#10;    • magic_wand_size – Number in range [1, 215-1]&#10;    • deposit_group - Text field with max length of 20 symbols&#10;    • deposit_start_date – Date and time field&#10;    • deposit_amount – Floating point number field&#10;    • deposit_interest - Floating point number field&#10;    • deposit_charge - Floating point number field&#10;    • deposit_expiration_date – Date and time field&#10;    • is_deposit_expired – Boolean field">
      <created>1678078801064</created>
      <option name="number" value="00005" />
      <option name="presentableId" value="LOCAL-00005" />
      <option name="project" value="LOCAL" />
      <updated>1678078801064</updated>
    </task>
    <task id="LOCAL-00006" summary="    1. Gringotts Database&#10;Your task is to create table wizard_deposits using the Code First approach. The table should contain the following fields:&#10;    • id – Primary Key (number in range [1, 231-1].&#10;    • first_name – Text field with max length of 50 symbols.&#10;    • last_name - Text field with max length of 60 symbols. Required&#10;    • notes – Text field with max length of 1000 symbols&#10;    • age – Required&#10;    • magic_wand_creator – Text field with max length of 100 symbols&#10;    • magic_wand_size – Number in range [1, 215-1]&#10;    • deposit_group - Text field with max length of 20 symbols&#10;    • deposit_start_date – Date and time field&#10;    • deposit_amount – Floating point number field&#10;    • deposit_interest - Floating point number field&#10;    • deposit_charge - Floating point number field&#10;    • deposit_expiration_date – Date and time field&#10;    • is_deposit_expired – Boolean field">
      <created>1678079101808</created>
      <option name="number" value="00006" />
      <option name="presentableId" value="LOCAL-00006" />
      <option name="project" value="LOCAL" />
      <updated>1678079101808</updated>
    </task>
    <task id="LOCAL-00007" summary="Create a database for storing data about sales using the Code First approach. The database should have the following tables:&#10;    • product (id, name, quantity, price)&#10;    • customer (id, name, email, credit_card_number)&#10;    • store_location (id, location_name)&#10;    • sale (id, product_id, customer_id, store_location_id, date)&#10;The relationships between the tables are as follows:&#10;    • Sale has one product and a product can be sold in many sales&#10;    • Sale has one customer and a customer can participate in many sales&#10;    • Sale has one store location and one store location can have many sales&#10;Hint&#10;You can use the following format to design your model classes:&#10;    • Product &#10;        ◦ int id&#10;        ◦ String name &#10;        ◦ Double quantity &#10;        ◦ BigDecimal price &#10;        ◦ Set&lt;Sale&gt; sales&#10;    • Customer &#10;        ◦ int id&#10;        ◦ String name&#10;        ◦ String email&#10;        ◦ String creditCardNumber&#10;        ◦ Set&lt;Sale&gt; sales&#10;    • StoreLocation &#10;        ◦ int id&#10;        ◦ String locationName&#10;        ◦ Set&lt;Sale&gt; sales&#10;    • Sale &#10;        ◦ int id&#10;        ◦ Product product&#10;        ◦ Customer customer&#10;        ◦ StoreLocation storeLocation&#10;        ◦ Date date">
      <created>1678158487004</created>
      <option name="number" value="00007" />
      <option name="presentableId" value="LOCAL-00007" />
      <option name="project" value="LOCAL" />
      <updated>1678158487004</updated>
    </task>
    <task id="LOCAL-00008" summary="Your task is to create a database for a University System, using the Code First approach. In the database, we should keep information about students, teachers and courses. The database should have the following tables:&#10;    • Student (id, first name, last name, phone number, average grade, attendance)&#10;    • Teacher (id, first name, last name, phone number, email, salary per hour)&#10;    • Course (id, name, description, start date, end date, credits)&#10;The relationships between the tables are as follows:&#10;    • Each student can be enrolled in many courses and in each course many students can be enrolled &#10;    • A teacher can teach in many courses but one course can be taught only by one teacher&#10;Use class hierarchy to reduce code duplication">
      <created>1678236999658</created>
      <option name="number" value="00008" />
      <option name="presentableId" value="LOCAL-00008" />
      <option name="project" value="LOCAL" />
      <updated>1678236999658</updated>
    </task>
    <task id="LOCAL-00009" summary="Your task is to create a database for a University System, using the Code First approach. In the database, we should keep information about students, teachers and courses. The database should have the following tables:&#10;    • Student (id, first name, last name, phone number, average grade, attendance)&#10;    • Teacher (id, first name, last name, phone number, email, salary per hour)&#10;    • Course (id, name, description, start date, end date, credits)&#10;The relationships between the tables are as follows:&#10;    • Each student can be enrolled in many courses and in each course many students can be enrolled &#10;    • A teacher can teach in many courses but one course can be taught only by one teacher&#10;Use class hierarchy to reduce code duplication">
      <created>1678238081326</created>
      <option name="number" value="00009" />
      <option name="presentableId" value="LOCAL-00009" />
      <option name="project" value="LOCAL" />
      <updated>1678238081326</updated>
    </task>
    <option name="localTasksCounter" value="10" />
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="Exercise: Hibernate Code First" />
    <MESSAGE value="Exercise: Hibernate Code First&#10;;)" />
    <MESSAGE value="    1. Gringotts Database&#10;Your task is to create table wizard_deposits using the Code First approach. The table should contain the following fields:&#10;    • id – Primary Key (number in range [1, 231-1].&#10;    • first_name – Text field with max length of 50 symbols.&#10;    • last_name - Text field with max length of 60 symbols. Required&#10;    • notes – Text field with max length of 1000 symbols&#10;    • age – Required&#10;    • magic_wand_creator – Text field with max length of 100 symbols&#10;    • magic_wand_size – Number in range [1, 215-1]&#10;    • deposit_group - Text field with max length of 20 symbols&#10;    • deposit_start_date – Date and time field&#10;    • deposit_amount – Floating point number field&#10;    • deposit_interest - Floating point number field&#10;    • deposit_charge - Floating point number field&#10;    • deposit_expiration_date – Date and time field&#10;    • is_deposit_expired – Boolean field" />
    <MESSAGE value="Create a database for storing data about sales using the Code First approach. The database should have the following tables:&#10;    • product (id, name, quantity, price)&#10;    • customer (id, name, email, credit_card_number)&#10;    • store_location (id, location_name)&#10;    • sale (id, product_id, customer_id, store_location_id, date)&#10;The relationships between the tables are as follows:&#10;    • Sale has one product and a product can be sold in many sales&#10;    • Sale has one customer and a customer can participate in many sales&#10;    • Sale has one store location and one store location can have many sales&#10;Hint&#10;You can use the following format to design your model classes:&#10;    • Product &#10;        ◦ int id&#10;        ◦ String name &#10;        ◦ Double quantity &#10;        ◦ BigDecimal price &#10;        ◦ Set&lt;Sale&gt; sales&#10;    • Customer &#10;        ◦ int id&#10;        ◦ String name&#10;        ◦ String email&#10;        ◦ String creditCardNumber&#10;        ◦ Set&lt;Sale&gt; sales&#10;    • StoreLocation &#10;        ◦ int id&#10;        ◦ String locationName&#10;        ◦ Set&lt;Sale&gt; sales&#10;    • Sale &#10;        ◦ int id&#10;        ◦ Product product&#10;        ◦ Customer customer&#10;        ◦ StoreLocation storeLocation&#10;        ◦ Date date" />
    <MESSAGE value="Your task is to create a database for a University System, using the Code First approach. In the database, we should keep information about students, teachers and courses. The database should have the following tables:&#10;    • Student (id, first name, last name, phone number, average grade, attendance)&#10;    • Teacher (id, first name, last name, phone number, email, salary per hour)&#10;    • Course (id, name, description, start date, end date, credits)&#10;The relationships between the tables are as follows:&#10;    • Each student can be enrolled in many courses and in each course many students can be enrolled &#10;    • A teacher can teach in many courses but one course can be taught only by one teacher&#10;Use class hierarchy to reduce code duplication" />
    <option name="LAST_COMMIT_MESSAGE" value="Your task is to create a database for a University System, using the Code First approach. In the database, we should keep information about students, teachers and courses. The database should have the following tables:&#10;    • Student (id, first name, last name, phone number, average grade, attendance)&#10;    • Teacher (id, first name, last name, phone number, email, salary per hour)&#10;    • Course (id, name, description, start date, end date, credits)&#10;The relationships between the tables are as follows:&#10;    • Each student can be enrolled in many courses and in each course many students can be enrolled &#10;    • A teacher can teach in many courses but one course can be taught only by one teacher&#10;Use class hierarchy to reduce code duplication" />
  </component>
</project>